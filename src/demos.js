// Demo loaders: import Markdown notebooks and extract minimal structured content
// (sequences, first table, and a protocol) to seed the interactive blocks.

import DEMO_GFP from '../DEMO_NOTEBOOK_INPUT.md?raw';
import DEMO_LIPASE from '../DEMO_NOTEBOOK_LIPASE.md?raw';
import DEMO_LIVER from '../DEMO_NOTEBOOK_LIVER_CHIP.md?raw';

const escapeHtml = (str) =>
  String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');

const extractFirstFencedCode = (md) => {
  const m = md.match(/```[a-zA-Z]*\n([\s\S]*?)```/);
  if (!m) return null;
  const body = m[1] || '';
  const letters = body.replace(/[^A-Za-z]/g, '').toUpperCase();
  return letters.length ? letters : null;
};

const extractFirstTable = (md) => {
  const lines = md.split(/\r?\n/);
  let start = -1;
  for (let i = 0; i < lines.length; i++) {
    if (/^\|.*\|$/.test(lines[i]) && /---/.test(lines[i + 1] || '')) {
      start = i;
      break;
    }
  }
  if (start === -1) return null;
  const header = lines[start]
    .split('|')
    .map((s) => s.trim())
    .filter((s) => s.length);
  const rows = [];
  for (let i = start + 2; i < lines.length; i++) {
    if (!/^\|.*\|$/.test(lines[i])) break;
    const cells = lines[i]
      .split('|')
      .map((s) => s.trim())
      .filter((s) => s.length);
    if (cells.length !== header.length) continue;
    const row = {};
    header.forEach((h, idx) => (row[h] = cells[idx]));
    rows.push(row);
  }
  return header.length && rows.length ? { columns: header, rows } : null;
};

const extractFirstNumberedList = (md) => {
  const lines = md.split(/\r?\n/);
  const steps = [];
  let capturing = false;
  for (let i = 0; i < lines.length; i++) {
    const m = lines[i].match(/^\s*\d+\.\s+(.*)$/);
    if (m) {
      capturing = true;
      steps.push(m[1].trim());
    } else if (capturing) {
      if (lines[i].trim() === '' || /^\s*#/.test(lines[i])) break;
    }
  }
  return steps.length ? steps : null;
};

const buildDemoFromMarkdown = (md, id, name) => {
  const seq = extractFirstFencedCode(md);
  const table = extractFirstTable(md);
  const steps = extractFirstNumberedList(md);
  const html =
    `<h1 style="color:#991B1B; font-weight:800; margin-bottom:0.25rem;">${name}</h1>` +
    `<p style="color:#334155"><em>Imported from Markdown demo. Full content below:</em></p>` +
    `<pre style="white-space:pre-wrap; font-size:15px; line-height:1.6; color:#0f172a; margin-top:0.75rem;">${escapeHtml(
      md,
    )}</pre>`;
  const demo = { id, name, documentHtml: html };
  if (seq) demo.sequences = [{ id: `${id}-seq-1`, name: 'Imported Sequence', sequence: seq }];
  if (table) demo.tables = [{ id: `${id}-table-1`, ...table }];
  if (steps)
    demo.protocols = [
      {
        id: `${id}-proto-1`,
        title: 'Imported Protocol',
        description: 'Steps parsed from the first numbered list in the demo.',
        steps,
        notes: 'Autogenerated from Markdown.',
      },
    ];
  demo.proteinBlocks = [`${id}-prot-1`];
  return demo;
};

export const DEMOS = [
  buildDemoFromMarkdown(DEMO_GFP, 'gfp-demo', 'GFP Mutation Analysis'),
  buildDemoFromMarkdown(DEMO_LIPASE, 'lipase-demo', 'Lipase Engineering'),
  buildDemoFromMarkdown(DEMO_LIVER, 'liverchip-demo', 'Liver-on-Chip Study'),
];

